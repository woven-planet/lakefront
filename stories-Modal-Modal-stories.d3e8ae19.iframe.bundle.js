"use strict";(self.webpackChunk_woven_planet_lakefront=self.webpackChunk_woven_planet_lakefront||[]).push([[3453],{"./src/stories/Modal/Modal.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{LongDivideModal:()=>LongDivideModal,PortalModal:()=>PortalModal,SimpleModal:()=>SimpleModal,WideDivideModal:()=>WideDivideModal,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),src_components_Modal_Modal__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Modal/Modal.tsx"),_storybook_DocBlock__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./.storybook/DocBlock.tsx"),src_components_Button_Button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/Button/Button.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Lakefront/Modal",component:src_components_Modal_Modal__WEBPACK_IMPORTED_MODULE_1__.Z,argTypes:{actionButton:{table:{disable:!0}},additionalText:{table:{disable:!0}},children:{table:{disable:!0}},className:{table:{disable:!0}},isOpen:{table:{disable:!0}}},parameters:{docs:{page:_storybook_DocBlock__WEBPACK_IMPORTED_MODULE_2__.Z}}},Template=args=>{const[visible,setVisible]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),updateModalVisibility=()=>{setVisible((isVisible=>!isVisible))};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(src_components_Button_Button__WEBPACK_IMPORTED_MODULE_3__.Z,{onClick:updateModalVisibility,children:["Open ",args.headerText]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(src_components_Modal_Modal__WEBPACK_IMPORTED_MODULE_1__.Z,{...args,handleClose:updateModalVisibility,isOpen:visible,actionButton:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(src_components_Button_Button__WEBPACK_IMPORTED_MODULE_3__.Z,{onClick:updateModalVisibility,children:"Confirm"}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("span",{style:{fontStyle:"italic"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("p",{children:["The Modal component is a UI blocking dialog overlay.",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("br",{}),"You can use this for various purposes like confirmation."]}),args.additionalText&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("p",{children:args.additionalText})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("p",{children:["Confirm that this is the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("strong",{children:args.headerText})," modal?"]})]})})]})};Template.displayName="Template";const SimpleModal=Template.bind({});SimpleModal.args={headerText:"Small Basic Modal",subHeaderText:"Created with simplicity in mind.",isCloseIconVisible:!0,dialogWidth:"xs",renderInPortal:!1,additionalText:"If you have a really long statement and a smaller dialogWidth is specified, the dialog won't be as long. Longer statements or content will wrap."};const PortalModal=Template.bind({});PortalModal.args={headerText:"Medium Portal Modal",subHeaderText:"Rendered via a portal.",isCloseIconVisible:!0,cancelButtonText:"Close Portal",dialogWidth:"md",renderInPortal:!0,additionalText:"If you have a really long statement and a medium sized dialogWidth is specified, the dialog area will adjust. Statements or content that take up a lot of room will adjust as needed."};const WideDivideModal=Template.bind({});WideDivideModal.args={headerText:"Wide Divider Modal",subHeaderText:"Includes wide length and dividers.",isCloseIconVisible:!0,showTopDivider:!0,showBottomDivider:!0,dialogWidth:"xl",renderInPortal:!1,additionalText:"If you have a really long statement and a large dialogWidth is specified, the dialog area will expand quite a bit. This is great for statements or content that take up a lot of room."};const LongDivideModal=Template.bind({});LongDivideModal.args={headerText:"Long Divider Modal",subHeaderText:"Includes long length and dividers.",isCloseIconVisible:!0,showTopDivider:!0,showBottomDivider:!0,dialogWidth:"xs",renderInPortal:!1,additionalText:"If you have a really long statement and a large \ndialogWidth is specified, the dialog area will expand quite a bit. This is great for statements or content that take up a lot of room.\nIn order to make this fairly clear, let's repeat this statement again. If you have a really long statement and a large \ndialogWidth is specified, the dialog area will expand quite a bit. This is great for statements or content that take up a lot of room.\nIn order to make this fairly clear, let's repeat this statement again. In order to make this fairly clear, let's repeat this statement again. If you have a really long statement and a large \ndialogWidth is specified, the dialog area will expand quite a bit. This is great for statements or content that take up a lot of room.\nIn order to make this fairly clear, let's repeat this statement again. In order to make this fairly clear, let's repeat this statement again. If you have a really long statement and a large \ndialogWidth is specified, the dialog area will expand quite a bit. This is great for statements or content that take up a lot of room.\nIn order to make this fairly clear, let's repeat this statement again. In order to make this fairly clear, let's repeat this statement again. If you have a really long statement and a large \ndialogWidth is specified, the dialog area will expand quite a bit. This is great for statements or content that take up a lot of room.\nIn order to make this fairly clear, let's repeat this statement again."},SimpleModal.parameters={...SimpleModal.parameters,docs:{...SimpleModal.parameters?.docs,source:{originalSource:"args => {\n  const [visible, setVisible] = useState(false);\n  const updateModalVisibility = () => {\n    setVisible(isVisible => !isVisible);\n  };\n  return <div>\n            <Button onClick={updateModalVisibility}>Open {args.headerText}</Button>\n            <ModalComponent {...args} handleClose={updateModalVisibility} isOpen={visible} actionButton={<Button onClick={updateModalVisibility}>Confirm</Button>}>\n                <div>\n                    <span style={{\n          fontStyle: 'italic'\n        }}>\n                        <p>\n                            The Modal component is a UI blocking dialog overlay.\n                            <br />\n                            You can use this for various purposes like confirmation.\n                        </p>\n                        {args.additionalText && <p>{args.additionalText}</p>}\n                    </span>\n                    <p>\n                        Confirm that this is the <strong>{args.headerText}</strong> modal?\n                    </p>\n                </div>\n            </ModalComponent>\n        </div>;\n}",...SimpleModal.parameters?.docs?.source}}},PortalModal.parameters={...PortalModal.parameters,docs:{...PortalModal.parameters?.docs,source:{originalSource:"args => {\n  const [visible, setVisible] = useState(false);\n  const updateModalVisibility = () => {\n    setVisible(isVisible => !isVisible);\n  };\n  return <div>\n            <Button onClick={updateModalVisibility}>Open {args.headerText}</Button>\n            <ModalComponent {...args} handleClose={updateModalVisibility} isOpen={visible} actionButton={<Button onClick={updateModalVisibility}>Confirm</Button>}>\n                <div>\n                    <span style={{\n          fontStyle: 'italic'\n        }}>\n                        <p>\n                            The Modal component is a UI blocking dialog overlay.\n                            <br />\n                            You can use this for various purposes like confirmation.\n                        </p>\n                        {args.additionalText && <p>{args.additionalText}</p>}\n                    </span>\n                    <p>\n                        Confirm that this is the <strong>{args.headerText}</strong> modal?\n                    </p>\n                </div>\n            </ModalComponent>\n        </div>;\n}",...PortalModal.parameters?.docs?.source}}},WideDivideModal.parameters={...WideDivideModal.parameters,docs:{...WideDivideModal.parameters?.docs,source:{originalSource:"args => {\n  const [visible, setVisible] = useState(false);\n  const updateModalVisibility = () => {\n    setVisible(isVisible => !isVisible);\n  };\n  return <div>\n            <Button onClick={updateModalVisibility}>Open {args.headerText}</Button>\n            <ModalComponent {...args} handleClose={updateModalVisibility} isOpen={visible} actionButton={<Button onClick={updateModalVisibility}>Confirm</Button>}>\n                <div>\n                    <span style={{\n          fontStyle: 'italic'\n        }}>\n                        <p>\n                            The Modal component is a UI blocking dialog overlay.\n                            <br />\n                            You can use this for various purposes like confirmation.\n                        </p>\n                        {args.additionalText && <p>{args.additionalText}</p>}\n                    </span>\n                    <p>\n                        Confirm that this is the <strong>{args.headerText}</strong> modal?\n                    </p>\n                </div>\n            </ModalComponent>\n        </div>;\n}",...WideDivideModal.parameters?.docs?.source}}},LongDivideModal.parameters={...LongDivideModal.parameters,docs:{...LongDivideModal.parameters?.docs,source:{originalSource:"args => {\n  const [visible, setVisible] = useState(false);\n  const updateModalVisibility = () => {\n    setVisible(isVisible => !isVisible);\n  };\n  return <div>\n            <Button onClick={updateModalVisibility}>Open {args.headerText}</Button>\n            <ModalComponent {...args} handleClose={updateModalVisibility} isOpen={visible} actionButton={<Button onClick={updateModalVisibility}>Confirm</Button>}>\n                <div>\n                    <span style={{\n          fontStyle: 'italic'\n        }}>\n                        <p>\n                            The Modal component is a UI blocking dialog overlay.\n                            <br />\n                            You can use this for various purposes like confirmation.\n                        </p>\n                        {args.additionalText && <p>{args.additionalText}</p>}\n                    </span>\n                    <p>\n                        Confirm that this is the <strong>{args.headerText}</strong> modal?\n                    </p>\n                </div>\n            </ModalComponent>\n        </div>;\n}",...LongDivideModal.parameters?.docs?.source}}};const __namedExportsOrder=["SimpleModal","PortalModal","WideDivideModal","LongDivideModal"]}}]);