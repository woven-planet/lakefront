"use strict";(self.webpackChunk_woven_planet_lakefront=self.webpackChunk_woven_planet_lakefront||[]).push([[608],{"./src/stories/ConfirmationModal/ConfirmationModal.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BasicConfirm:()=>BasicConfirm,CustomizedConfirm:()=>CustomizedConfirm,PortalConfirm:()=>PortalConfirm,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ConfirmationModal_stories});var _path,react=__webpack_require__("./node_modules/react/index.js"),Modal=__webpack_require__("./src/components/Modal/Modal.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}function SvgErrorIcon(props){return react.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",height:24,viewBox:"0 0 24 24",width:24},props),_path||(_path=react.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"})))}var Button=__webpack_require__("./src/components/Button/Button.tsx"),theme=__webpack_require__("./src/styles/theme.ts"),emotion_element_6a883da9_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-element-6a883da9.browser.esm.js"),emotion_styled_browser_esm=__webpack_require__("./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js");const ConfirmationDiv=emotion_styled_browser_esm.Z.div({display:"flex",flexDirection:"column",alignItems:"left",span:{display:"flex",flexDirection:"column",alignItems:"left"},a:{display:"inline-block",marginBottom:"40px"},h4:{marginBlockStart:0,marginBlockEnd:0,marginInlineStart:0,marginInlineEnd:0,marginTop:"12px"}}),ConfirmationTitle=emotion_styled_browser_esm.Z.div({fontWeight:700,fontSize:18,marginLeft:"0.5em"}),ConfirmationTitleDiv=emotion_styled_browser_esm.Z.div({display:"flex",alignItems:"center",justifyContent:"center",marginTop:"0.5em",svg:{height:"2.5em",width:"2.5em"}}),ConfirmationContentSpan=emotion_styled_browser_esm.Z.span({margin:"23px 0 33px 0",textAlign:"left"});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const ConfirmationModal=({modalVisible,title,message,yes="Yes",no="No",onYes,onNo,className,renderInPortal})=>{const yesButton=(0,jsx_runtime.jsx)(Button.Z,{onClick:onYes,color:"destructive",children:yes});return(0,jsx_runtime.jsx)(emotion_element_6a883da9_browser_esm.a,{theme:theme.Z,children:(0,jsx_runtime.jsxs)(Modal.Z,{isOpen:modalVisible,handleClose:onNo,actionButton:yesButton,cancelButtonText:no,className,renderInPortal,children:[(0,jsx_runtime.jsxs)(ConfirmationTitleDiv,{children:[(0,jsx_runtime.jsx)(SvgErrorIcon,{style:{fill:theme.Z?.colors?.watermelon}}),title?(0,jsx_runtime.jsx)(ConfirmationTitle,{children:title}):""]}),(0,jsx_runtime.jsx)(ConfirmationDiv,{children:(0,jsx_runtime.jsx)(ConfirmationContentSpan,{children:message})})]})})},ConfirmationModal_ConfirmationModal=ConfirmationModal;ConfirmationModal.__docgenInfo={description:"Confirmation Modal Component\n\nThe Confirmation modal component is a UI blocking dialog meant to handle yes/no responses.\nThe state is not managed inside this component and visibility (via the `modalVisible` prop) needs to be maintained in the parent component.\nWhile the default rendering behavior is often sufficient, the `renderInPortal` prop can be used\nto append a div to the body.",methods:[],displayName:"ConfirmationModal",props:{modalVisible:{required:!0,tsType:{name:"boolean"},description:"The boolean value to determine if the modal is visible or not."},title:{required:!1,tsType:{name:"string"},description:"The title of the modal."},message:{required:!0,tsType:{name:"union",raw:"string | ReactElement",elements:[{name:"string"},{name:"ReactElement"}]},description:"The text or content to display in the main body of the modal."},yes:{required:!1,tsType:{name:"string"},description:"The yes/accept button text. This defaults to `Yes`.",defaultValue:{value:"'Yes'",computed:!1}},no:{required:!1,tsType:{name:"string"},description:"The no/decline button text. This defaults to `No`.",defaultValue:{value:"'No'",computed:!1}},onYes:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"The action to run when yes/accept action is triggered."},onNo:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"The action to run when no/decline action is triggered."},className:{required:!1,tsType:{name:"string"},description:"The classes to pass to the modal."},renderInPortal:{required:!1,tsType:{name:"boolean"},description:'When true, the component will mount a div to the body and render the dialog through it.\nThis is useful when the dialog would be inside a scrollable container or one with "overflow: hidden"\nso it doesn\'t get cut off. Uses IntersectionObserver and needs a polyfill if IE compatibility is needed. This\ndefaults to `false`.'}}};const Modal_ConfirmationModal=ConfirmationModal_ConfirmationModal;var DocBlock=__webpack_require__("./.storybook/DocBlock.tsx");const ConfirmationModal_stories={title:"Lakefront/Modal/ConfirmationModal",component:Modal_ConfirmationModal,argTypes:{actionButton:{table:{disable:!0}},buttonLabel:{table:{disable:!0}},className:{table:{disable:!0}},modalVisible:{table:{disable:!0}},onNo:{table:{disable:!0}},onYes:{table:{disable:!0}},renderInPortal:{table:{disable:!0}}},parameters:{docs:{page:DocBlock.Z}}},Template=args=>{const[visible,setVisible]=(0,react.useState)(!1),updateConfirmationModalVisibility=()=>{setVisible((isVisible=>!isVisible))};return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)(Button.Z,{onClick:updateConfirmationModalVisibility,children:["Open ",args.buttonLabel]}),(0,jsx_runtime.jsx)(Modal_ConfirmationModal,{...args,modalVisible:visible,onYes:updateConfirmationModalVisibility,onNo:updateConfirmationModalVisibility})]})},BasicConfirm=Template.bind({});BasicConfirm.args={buttonLabel:"Basic Confirm",title:"Are you sure you want to close this modal?",message:'"Yes" or "No" will close this modal.'};const CustomizedConfirm=Template.bind({});CustomizedConfirm.args={buttonLabel:"Customized Confirm",title:"Are you sure you want to close this modal?",message:(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("strong",{children:"Accept"})," or ",(0,jsx_runtime.jsx)("strong",{children:"Decline"})," will close this modal."]}),yes:"Accept",no:"Decline"};const PortalConfirm=Template.bind({});PortalConfirm.args={buttonLabel:"Portal Confirm",title:"Was this rendered in a portal?",message:'"Yes" or "No" will close this modal.',renderInPortal:!0};const __namedExportsOrder=["BasicConfirm","CustomizedConfirm","PortalConfirm"];BasicConfirm.parameters={...BasicConfirm.parameters,docs:{...BasicConfirm.parameters?.docs,source:{originalSource:"args => {\n  const [visible, setVisible] = useState(false);\n  const updateConfirmationModalVisibility = () => {\n    setVisible(isVisible => !isVisible);\n  };\n  return <div>\n            <Button onClick={updateConfirmationModalVisibility}>Open {args.buttonLabel}</Button>\n            <ConfirmationModalComponent {...args} modalVisible={visible} onYes={updateConfirmationModalVisibility} onNo={updateConfirmationModalVisibility} />\n        </div>;\n}",...BasicConfirm.parameters?.docs?.source}}},CustomizedConfirm.parameters={...CustomizedConfirm.parameters,docs:{...CustomizedConfirm.parameters?.docs,source:{originalSource:"args => {\n  const [visible, setVisible] = useState(false);\n  const updateConfirmationModalVisibility = () => {\n    setVisible(isVisible => !isVisible);\n  };\n  return <div>\n            <Button onClick={updateConfirmationModalVisibility}>Open {args.buttonLabel}</Button>\n            <ConfirmationModalComponent {...args} modalVisible={visible} onYes={updateConfirmationModalVisibility} onNo={updateConfirmationModalVisibility} />\n        </div>;\n}",...CustomizedConfirm.parameters?.docs?.source}}},PortalConfirm.parameters={...PortalConfirm.parameters,docs:{...PortalConfirm.parameters?.docs,source:{originalSource:"args => {\n  const [visible, setVisible] = useState(false);\n  const updateConfirmationModalVisibility = () => {\n    setVisible(isVisible => !isVisible);\n  };\n  return <div>\n            <Button onClick={updateConfirmationModalVisibility}>Open {args.buttonLabel}</Button>\n            <ConfirmationModalComponent {...args} modalVisible={visible} onYes={updateConfirmationModalVisibility} onNo={updateConfirmationModalVisibility} />\n        </div>;\n}",...PortalConfirm.parameters?.docs?.source}}}}}]);