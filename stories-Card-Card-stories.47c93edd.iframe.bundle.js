"use strict";(self.webpackChunk_woven_planet_lakefront=self.webpackChunk_woven_planet_lakefront||[]).push([[6323],{"./src/stories/Card/Card.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Card:()=>Card_stories_Card,MultiCard:()=>MultiCard,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Card_stories});var react=__webpack_require__("./node_modules/react/index.js"),Card=__webpack_require__("./src/components/Card/Card.tsx"),Snackbar=__webpack_require__("./src/components/Snackbar/index.ts"),Snackbar_util=__webpack_require__("./src/components/Snackbar/Snackbar.util.tsx");const StyledCard=(0,__webpack_require__("./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js").Z)(Card.Z)((()=>({margin:10})));var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const Card_stories={title:"Lakefront/Card",component:Card.Z},Card_stories_Card=(()=>{const[showMsg,setShowMsg]=(0,react.useState)(!1),showMessage=_value=>{setShowMsg((value=>!value))};return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(Snackbar.ZP,{message:"Clicked",open:showMsg,anchorOrigin:{vertical:"top",horizontal:"center"},onClose:()=>{showMessage()},type:Snackbar_util.oK.SUCCESS}),(0,jsx_runtime.jsx)(Card.Z,{title:"Card Title",description:"A description of the card being used.",disabled:!1,onClick:()=>showMessage(),children:(0,jsx_runtime.jsx)("span",{children:"Card content"})})]})}).bind({}),MultiCard=(()=>{const[showMsg,setShowMsg]=(0,react.useState)(!1),showMessage=_value=>{setShowMsg((value=>!value))};return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(Snackbar.ZP,{message:"Clicked",open:showMsg,anchorOrigin:{vertical:"top",horizontal:"center"},onClose:()=>{showMessage()},type:Snackbar_util.oK.SUCCESS}),(0,jsx_runtime.jsx)(StyledCard,{title:"Card 1",description:"A description of the card being used.",content:(0,jsx_runtime.jsx)("span",{children:"Card content"}),disabled:!1,onClick:()=>showMessage()}),(0,jsx_runtime.jsx)(StyledCard,{title:"Card 2",description:"A description of the card being used.",content:(0,jsx_runtime.jsx)("span",{children:"Card content"}),disabled:!1,onClick:()=>showMessage()}),(0,jsx_runtime.jsx)(StyledCard,{title:"Card 3",description:"A description of the card being used.",content:(0,jsx_runtime.jsx)("span",{children:"Card content"}),disabled:!1,onClick:()=>showMessage()}),(0,jsx_runtime.jsx)(StyledCard,{title:"Card 4",description:"A description of the card being used.",content:(0,jsx_runtime.jsx)("span",{children:"Card content"}),disabled:!1,onClick:()=>showMessage()}),(0,jsx_runtime.jsx)(StyledCard,{title:"Card 5",description:"A description of the card being used.",content:(0,jsx_runtime.jsx)("span",{children:"Card content"}),disabled:!1,onClick:()=>showMessage()}),(0,jsx_runtime.jsx)(StyledCard,{title:"Card 6",description:"A description of the card being used.",content:(0,jsx_runtime.jsx)("span",{style:{height:250,width:500},children:"Card content"}),disabled:!1,onClick:()=>showMessage()})]})}).bind({}),__namedExportsOrder=["Card","MultiCard"];Card_stories_Card.parameters={...Card_stories_Card.parameters,docs:{...Card_stories_Card.parameters?.docs,source:{originalSource:"() => {\n  const [showMsg, setShowMsg] = useState<boolean>(false);\n  const showMessage = (_value: boolean) => {\n    setShowMsg(value => !value);\n  };\n  const handleClose = () => {\n    showMessage(false);\n  };\n  return <div>\n            <Snackbar message='Clicked' open={showMsg} anchorOrigin={{\n      vertical: 'top',\n      horizontal: 'center'\n    }} onClose={handleClose} type={MESSAGE_TYPES.SUCCESS} />\n            <CardComponent title='Card Title' description='A description of the card being used.' disabled={false} onClick={() => showMessage(true)}>\n                <span>Card content</span>\n                </CardComponent>\n        </div>;\n}",...Card_stories_Card.parameters?.docs?.source}}},MultiCard.parameters={...MultiCard.parameters,docs:{...MultiCard.parameters?.docs,source:{originalSource:"() => {\n  const [showMsg, setShowMsg] = useState<boolean>(false);\n  const showMessage = (_value: boolean) => {\n    setShowMsg(value => !value);\n  };\n  const handleClose = () => {\n    showMessage(false);\n  };\n  return <div>\n            <Snackbar message='Clicked' open={showMsg} anchorOrigin={{\n      vertical: 'top',\n      horizontal: 'center'\n    }} onClose={handleClose} type={MESSAGE_TYPES.SUCCESS} />\n            <StyledCard title='Card 1' description='A description of the card being used.' content={<span>Card content</span>} disabled={false} onClick={() => showMessage(true)} />\n            <StyledCard title='Card 2' description='A description of the card being used.' content={<span>Card content</span>} disabled={false} onClick={() => showMessage(true)} />\n            <StyledCard title='Card 3' description='A description of the card being used.' content={<span>Card content</span>} disabled={false} onClick={() => showMessage(true)} />\n            <StyledCard title='Card 4' description='A description of the card being used.' content={<span>Card content</span>} disabled={false} onClick={() => showMessage(true)} />\n            <StyledCard title='Card 5' description='A description of the card being used.' content={<span>Card content</span>} disabled={false} onClick={() => showMessage(true)} />\n            <StyledCard title='Card 6' description='A description of the card being used.' content={<span style={{\n      height: 250,\n      width: 500\n    }}>Card content</span>} disabled={false} onClick={() => showMessage(true)} />\n        </div>;\n}",...MultiCard.parameters?.docs?.source}}}}}]);