"use strict";(self.webpackChunk_woven_planet_lakefront=self.webpackChunk_woven_planet_lakefront||[]).push([[8362],{"./src/stories/RefreshToolbar/RefreshToolbar.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{RefreshToolbar:()=>RefreshToolbar_stories_RefreshToolbar,__namedExportsOrder:()=>__namedExportsOrder,default:()=>RefreshToolbar_stories});var react=__webpack_require__("./node_modules/react/index.js"),emotion_styled_browser_esm=__webpack_require__("./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"),Loading=__webpack_require__("./src/components/Loading/Loading.tsx");const ToolbarContainer=emotion_styled_browser_esm.Z.div((({standalone,theme})=>({alignItems:"center",backgroundColor:theme?.colors?.white,boxSizing:"border-box",display:"flex",height:"50px",zIndex:1,padding:"0 16px",...standalone&&{borderBottom:"1px solid",borderColor:theme?.colors?.mercury}}))),LogoLoadingSpinner=(0,emotion_styled_browser_esm.Z)(Loading.Z)((({width,height,theme})=>({"svg path":{fill:"currentColor",width,height}}))),RefreshProgressContainer=emotion_styled_browser_esm.Z.div((({theme})=>({alignItems:"center",color:theme?.colors?.pavement,display:"inline-flex",fontSize:"13px",paddingTop:"3px","@keyframes spin":{"0%":{transform:"rotate(0deg)"},"100%":{transform:"rotate(360deg)"}},img:{animation:"spin 2s linear infinite",height:"24px",width:"24px",marginLeft:"5px",marginRight:"10px"},span:{paddingTop:"4px"}}))),ToolbarAdditionalContent=emotion_styled_browser_esm.Z.div((({theme})=>({display:"inline-grid",gridTemplateColumns:"1fr minmax(225px, max-content)",width:"100%",zIndex:"inherit"}))),ButtonContainer=emotion_styled_browser_esm.Z.div((({theme})=>({display:"flex",alignItems:"center",button:{border:0,borderRadius:"50%",height:"40px",width:"40px",minWidth:"40px",padding:0,margin:"0 8px",svg:{color:theme?.colors?.dolphin},"&:hover":{backgroundColor:theme?.colors?.selago,"svg path":{color:theme?.colors?.storm}},"&:disabled":{svg:{fill:theme?.colors?.mercury}}}}))),RightSideContainer=emotion_styled_browser_esm.Z.div((({theme})=>({alignItems:"center",color:theme?.colors?.pavement,display:"inline-flex",fontSize:"13px",paddingTop:"3px",justifyContent:"flex-end"})));var _path,_path2;function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}function SvgRefreshIcon(props){return react.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",height:24,viewBox:"0 0 24 24",width:24},props),_path||(_path=react.createElement("path",{d:"M0 0h24v24H0V0z",fill:"none"})),_path2||(_path2=react.createElement("path",{d:"M17.65 6.35A7.958 7.958 0 0012 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0112 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"})))}var Button=__webpack_require__("./src/components/Button/Button.tsx"),emotion_element_6a883da9_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-element-6a883da9.browser.esm.js"),theme=__webpack_require__("./src/styles/theme.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const RefreshToolbar=props=>{const{handleRefresh,className,children,standalone=!0,lastUpdated="",isRefreshing=!1,refreshProgressLabel="Updating...",rightComp,rightSideText,refreshButton}=props;return(0,jsx_runtime.jsx)(emotion_element_6a883da9_browser_esm.a,{theme:theme.Z,children:(0,jsx_runtime.jsxs)(ToolbarContainer,{className,standalone,children:[(0,jsx_runtime.jsxs)("div",{children:[isRefreshing&&(0,jsx_runtime.jsx)(RefreshProgressContainer,{children:(0,jsx_runtime.jsx)(LogoLoadingSpinner,{animated:!0,height:24,label:refreshProgressLabel,labelPosition:"RIGHT",width:24})}),!isRefreshing&&(refreshButton||(0,jsx_runtime.jsx)(Button.Z,{icon:(0,jsx_runtime.jsx)(SvgRefreshIcon,{}),onClick:handleRefresh}))]}),(0,jsx_runtime.jsxs)(ToolbarAdditionalContent,{children:[(0,jsx_runtime.jsx)(ButtonContainer,{children:!isRefreshing&&children}),(0,jsx_runtime.jsxs)(RightSideContainer,{children:[rightComp,lastUpdated&&rightSideText]})]})]})})},RefreshToolbar_RefreshToolbar=RefreshToolbar;RefreshToolbar.__docgenInfo={description:"Refresh toolbar component that can be used as an additional header row.\n\nSet [standalone] to false if you want to apply your own container styling (with className\nprop or a wrapper). Set [standalone] to true to add full-width behavior with margins and\na bottom border (to function as a standalone header). Defaults to true.",methods:[],displayName:"RefreshToolbar",props:{className:{required:!1,tsType:{name:"string"},description:"This is to set the Refresh toolbar class."},children:{required:!1,tsType:{name:"ReactNode"},description:"The additional content to display if desired."},standalone:{required:!1,tsType:{name:"boolean"},description:"This is to set to false if you want to apply your own container styling (with className prop or a wrapper)"},isRefreshing:{required:!1,tsType:{name:"boolean"},description:"Set this to true if you want to display the loading image."},lastUpdated:{required:!1,tsType:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}]},description:"This is to set the last updated text."},refreshProgressLabel:{required:!1,tsType:{name:"string"},description:"This is to display the loading image label."},rightComp:{required:!1,tsType:{name:"ReactNode"},description:"This is to render right side components."},rightSideText:{required:!1,tsType:{name:"string"},description:"This is to set right side text."},refreshButton:{required:!1,tsType:{name:"ReactNode"},description:"This is to render a custom refresh button."}}};const components_RefreshToolbar=RefreshToolbar_RefreshToolbar;var DocBlock=__webpack_require__("./.storybook/DocBlock.tsx"),lakefrontColors=__webpack_require__("./src/styles/lakefrontColors.ts");const RefreshToolbar_stories={title:"Lakefront/RefreshToolbar",component:components_RefreshToolbar,parameters:{docs:{page:DocBlock.Z}}},RefreshToolbar_stories_RefreshToolbar=(args=>{const[count,setCount]=(0,react.useState)(0),[showBanner,setShowBanner]=(0,react.useState)(!1),refreshToolbarRef=(0,react.useRef)(null);return(0,react.useEffect)((()=>{refreshToolbarRef.current&&setShowBanner(!0);const timer=setTimeout((()=>{setShowBanner(!1)}),3e3);return()=>{clearTimeout(timer)}}),[count]),(0,jsx_runtime.jsxs)("div",{ref:refreshToolbarRef,children:[(0,jsx_runtime.jsxs)("div",{style:{minHeight:20,backgroundColor:showBanner&&lakefrontColors.Bz,padding:8,margin:"8px 0",textAlign:"center",width:"100%"},children:[showBanner&&count>0&&`Refresh clicked ${count} times.`,showBanner&&0===count&&"Refresh counter reset to 0"]}),(0,jsx_runtime.jsxs)("section",{style:{display:"inline-flex"},children:[(0,jsx_runtime.jsx)(components_RefreshToolbar,{handleRefresh:()=>{setCount((count=>count+1))},className:args.className,standalone:args.standalone,isRefreshing:args.isRefreshing,lastUpdated:args.lastUpdated,refreshProgressLabel:args.refreshProgressLabel,rightComp:args.rightComp,rightSideText:args.rightSideText,refreshButton:args.refreshButton}),(0,jsx_runtime.jsx)(Button.Z,{color:"secondary",onClick:()=>{setCount(0)},style:{marginTop:"10px",marginLeft:"10px"},children:"Reset"})]})]})}).bind({});RefreshToolbar_stories_RefreshToolbar.args={isRefreshing:!1,refreshProgressLabel:"Loading...",refreshTooltipText:"Refresh LogSync File Details",lastUpdated:"11:28:22 AM",rightSideText:"Last Updated: 11:28:22 AM EST"};const __namedExportsOrder=["RefreshToolbar"];RefreshToolbar_stories_RefreshToolbar.parameters={...RefreshToolbar_stories_RefreshToolbar.parameters,docs:{...RefreshToolbar_stories_RefreshToolbar.parameters?.docs,source:{originalSource:"args => {\n  const [count, setCount] = useState(0);\n  const [showBanner, setShowBanner] = useState(false);\n  const refreshToolbarRef = useRef(null);\n  const handleRefresh = () => {\n    setCount(count => count + 1);\n  };\n  const resetCount = () => {\n    setCount(0);\n  };\n  useEffect(() => {\n    if (refreshToolbarRef.current) {\n      setShowBanner(true);\n    }\n    const timer = setTimeout(() => {\n      setShowBanner(false);\n    }, 3000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [count]);\n  return <div ref={refreshToolbarRef}>\n            <div style={{\n      minHeight: 20,\n      backgroundColor: showBanner && emerald,\n      padding: 8,\n      margin: '8px 0',\n      textAlign: 'center',\n      width: '100%'\n    }}>\n                {showBanner && count > 0 && `Refresh clicked ${count} times.`}\n                {showBanner && count === 0 && `Refresh counter reset to 0`}\n            </div>\n            <section style={{\n      display: 'inline-flex'\n    }}>\n                <RefreshToolbarComponent handleRefresh={handleRefresh} className={args.className} standalone={args.standalone} isRefreshing={args.isRefreshing} lastUpdated={args.lastUpdated} refreshProgressLabel={args.refreshProgressLabel} rightComp={args.rightComp} rightSideText={args.rightSideText} refreshButton={args.refreshButton} />\n                <Button color='secondary' onClick={resetCount} style={{\n        marginTop: '10px',\n        marginLeft: '10px'\n      }}>Reset</Button>\n            </section>\n        </div>;\n}",...RefreshToolbar_stories_RefreshToolbar.parameters?.docs?.source}}}}}]);