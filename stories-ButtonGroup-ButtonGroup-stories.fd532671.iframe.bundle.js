"use strict";(self.webpackChunk_woven_planet_lakefront=self.webpackChunk_woven_planet_lakefront||[]).push([[8671],{"./src/stories/ButtonGroup/ButtonGroup.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ButtonGroup:()=>ButtonGroup,FourButtonGroup:()=>FourButtonGroup,GroupMode:()=>GroupMode,NoneSelectedGroup:()=>NoneSelectedGroup,ThreeButtonGroup:()=>ThreeButtonGroup,WithCustomButton:()=>WithCustomButton,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),src_components_ButtonGroup__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/ButtonGroup/index.ts"),src_components_Button__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/Button/index.ts"),src_styles_lakefrontColors__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/styles/lakefrontColors.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Lakefront/ButtonGroup",component:src_components_ButtonGroup__WEBPACK_IMPORTED_MODULE_1__.Z},Template=args=>{const[selected,setSelected]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(args.selectedId),handleSelected=event=>{setSelected(event.currentTarget.id)},buttonConfigs=args.buttonConfigs.map((config=>({...config,onClick:selected?handleSelected:void 0})));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(src_components_ButtonGroup__WEBPACK_IMPORTED_MODULE_1__.Z,{...args,buttonConfigs,selectedId:selected})},ButtonGroup=Template.bind({});ButtonGroup.args={mode:"toggle",selectedId:"left",buttonConfigs:[{id:"left",label:"Left"},{id:"right",label:"Right"}]};const ThreeButtonGroup=Template.bind({});ThreeButtonGroup.args={mode:"toggle",selectedId:"middle",buttonConfigs:[{id:"left",label:"Left"},{id:"middle",label:"Middle"},{id:"right",label:"Right"}]};const FourButtonGroup=Template.bind({});FourButtonGroup.args={mode:"toggle",selectedId:"right-middle",buttonConfigs:[{id:"left",label:"Left"},{id:"left-middle",label:"Middle-Left"},{id:"right-middle",label:"Middle-Right"},{id:"right",label:"Right"}]};const NoneSelectedGroup=Template.bind({});NoneSelectedGroup.args={mode:"toggle",buttonConfigs:[{id:"left",label:"Left"},{id:"middle",label:"Middle"},{id:"right",label:"Right"}]};const GroupMode=Template.bind({});GroupMode.args={mode:"group",buttonConfigs:[{id:"left",label:"Left"},{id:"middle",label:"Middle"},{id:"right",label:"Right"}]};const WithCustomButton=Template.bind({});WithCustomButton.args={Button:props=>{const colorMap={left:src_styles_lakefrontColors__WEBPACK_IMPORTED_MODULE_3__.ZP.saturatedRed,middle:src_styles_lakefrontColors__WEBPACK_IMPORTED_MODULE_3__.ZP.black,right:src_styles_lakefrontColors__WEBPACK_IMPORTED_MODULE_3__.ZP.pavement};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(src_components_Button__WEBPACK_IMPORTED_MODULE_2__.Z,{...props,style:{width:100,height:100,borderRadius:"50%",backgroundColor:colorMap[props.id]},children:props.children})},mode:"group",buttonConfigs:[{id:"left",label:"Left"},{id:"middle",label:"Middle"},{id:"right",label:"Right"}]};const __namedExportsOrder=["ButtonGroup","ThreeButtonGroup","FourButtonGroup","NoneSelectedGroup","GroupMode","WithCustomButton"];ButtonGroup.parameters={...ButtonGroup.parameters,docs:{...ButtonGroup.parameters?.docs,source:{originalSource:"args => {\n  const [selected, setSelected] = useState<string>(args.selectedId);\n  const handleSelected: MouseEventHandler<HTMLButtonElement> = event => {\n    setSelected(event.currentTarget.id);\n  };\n  const buttonConfigs = args.buttonConfigs.map(config => ({\n    ...config,\n    onClick: selected ? handleSelected : undefined\n  }));\n  return <ButtonGroupComponent {...args} buttonConfigs={buttonConfigs} selectedId={selected} />;\n}",...ButtonGroup.parameters?.docs?.source}}},ThreeButtonGroup.parameters={...ThreeButtonGroup.parameters,docs:{...ThreeButtonGroup.parameters?.docs,source:{originalSource:"args => {\n  const [selected, setSelected] = useState<string>(args.selectedId);\n  const handleSelected: MouseEventHandler<HTMLButtonElement> = event => {\n    setSelected(event.currentTarget.id);\n  };\n  const buttonConfigs = args.buttonConfigs.map(config => ({\n    ...config,\n    onClick: selected ? handleSelected : undefined\n  }));\n  return <ButtonGroupComponent {...args} buttonConfigs={buttonConfigs} selectedId={selected} />;\n}",...ThreeButtonGroup.parameters?.docs?.source}}},FourButtonGroup.parameters={...FourButtonGroup.parameters,docs:{...FourButtonGroup.parameters?.docs,source:{originalSource:"args => {\n  const [selected, setSelected] = useState<string>(args.selectedId);\n  const handleSelected: MouseEventHandler<HTMLButtonElement> = event => {\n    setSelected(event.currentTarget.id);\n  };\n  const buttonConfigs = args.buttonConfigs.map(config => ({\n    ...config,\n    onClick: selected ? handleSelected : undefined\n  }));\n  return <ButtonGroupComponent {...args} buttonConfigs={buttonConfigs} selectedId={selected} />;\n}",...FourButtonGroup.parameters?.docs?.source}}},NoneSelectedGroup.parameters={...NoneSelectedGroup.parameters,docs:{...NoneSelectedGroup.parameters?.docs,source:{originalSource:"args => {\n  const [selected, setSelected] = useState<string>(args.selectedId);\n  const handleSelected: MouseEventHandler<HTMLButtonElement> = event => {\n    setSelected(event.currentTarget.id);\n  };\n  const buttonConfigs = args.buttonConfigs.map(config => ({\n    ...config,\n    onClick: selected ? handleSelected : undefined\n  }));\n  return <ButtonGroupComponent {...args} buttonConfigs={buttonConfigs} selectedId={selected} />;\n}",...NoneSelectedGroup.parameters?.docs?.source}}},GroupMode.parameters={...GroupMode.parameters,docs:{...GroupMode.parameters?.docs,source:{originalSource:"args => {\n  const [selected, setSelected] = useState<string>(args.selectedId);\n  const handleSelected: MouseEventHandler<HTMLButtonElement> = event => {\n    setSelected(event.currentTarget.id);\n  };\n  const buttonConfigs = args.buttonConfigs.map(config => ({\n    ...config,\n    onClick: selected ? handleSelected : undefined\n  }));\n  return <ButtonGroupComponent {...args} buttonConfigs={buttonConfigs} selectedId={selected} />;\n}",...GroupMode.parameters?.docs?.source}}},WithCustomButton.parameters={...WithCustomButton.parameters,docs:{...WithCustomButton.parameters?.docs,source:{originalSource:"args => {\n  const [selected, setSelected] = useState<string>(args.selectedId);\n  const handleSelected: MouseEventHandler<HTMLButtonElement> = event => {\n    setSelected(event.currentTarget.id);\n  };\n  const buttonConfigs = args.buttonConfigs.map(config => ({\n    ...config,\n    onClick: selected ? handleSelected : undefined\n  }));\n  return <ButtonGroupComponent {...args} buttonConfigs={buttonConfigs} selectedId={selected} />;\n}",...WithCustomButton.parameters?.docs?.source}}}}}]);